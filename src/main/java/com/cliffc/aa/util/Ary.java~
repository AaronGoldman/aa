package com.cliffc.aa.util;

import com.sun.istack.internal.NotNull;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Function;
import java.util.function.Predicate;

// ArrayList with saner syntax
public class Ary<E> {
  E[] _es;
  int _len;
  Ary(E[] es, int len) { _es=es; _len=len; }
  Ary(Class<E> clazz) { this((E[]) Array.newInstance(clazz, 0),0); }

  Ary<E> add( E e ) {
    if( _len >= _es.length ) _es = Arrays.copyOf(_es,_es.length<<1);
    _es[_len++] = e;
    return this;
  }

  Ary<E> del( int i ) {
    if( i>=_len ) throw new IllegalArgumentException(""+i+" OOB "+_len);
    _es[i]=_es[--_len];
    return this;
  }

  /** @return compact array version, using the internal base array where possible. */
  E[] asAry() { return _len==_es.length ? _es : Arrays.copyOf(_es,_len); }

  /** @param f function to apply to each element.  Updates in-place. */
  public void map_update( Function<E,E> f ) { for( int i = 0; i<_len; i++ ) _es[i] = f.apply(_es[i]); }
  /** @param P filter out elements failing to pass the predicate; updates in
   *  place and shuffles list */
  void filter_update( Predicate<E> P ) {
    for( int i=0; i<_len; i++ )
      if( !P.test(_es[i]) )
        del(i--);
  }
  /** Sorts in-place 
   *  @param c Comparator to sort by */
  void sort_update(Comparator<? super E> c ) { Arrays.sort(_es, 0, _len, c);  }
  /** Find the first element matching predicate P, or -1 if none.  Note that
   *  most del calls shuffle the list, so the first element might be random.
   *  @param P Predicate to match
   *  @return index of first matching element, or -1 if none */
  int find( Predicate<E> P ) {
    for( int i=0; i<_len; i++ )  if( P.test(_es[i]) )  return i;
    return -1;
  }
  /** @return an iterator */
  @NotNull public Iterator<E> iterator() { return new Iter(); }
  private class Iter implements Iterator<E> {
    int _i=0;
    @Override public boolean hasNext() { return _i<_len; }
    @Override public E next() { return _es[_i++]; }
  }
  @Override public String toString() {
    SB sb = new SB().p('{');
    for( int i=0; i<_len; i++ ) {
      if( i>0 ) sb.p(',');
      sb.p(_es[i].toString());
    }
    return sb.p('}').toString();
  }
}
